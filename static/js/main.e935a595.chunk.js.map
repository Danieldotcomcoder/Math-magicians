{"version":3,"sources":["logic/operate.js","components/Calculator.js","logic/calculate.js","App.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","Calculator","useState","total","setTotal","next","setNext","setOperation","operator","e","obj","buttonName","target","innerText","match","includes","parseFloat","className","type","onClick","id","App","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAEe,SAASA,EAAQC,EAAWC,EAAWC,GACpD,IAAMC,EAAMC,IAAIJ,GACVK,EAAMD,IAAIH,GAChB,GAAkB,MAAdC,EACF,OAAOC,EAAIG,KAAKD,GAAKE,WAEvB,GAAkB,MAAdL,EACF,OAAOC,EAAIK,MAAMH,GAAKE,WAExB,GAAkB,MAAdL,EACF,OAAOC,EAAIM,MAAMJ,GAAKE,WAExB,GAAkB,SAAdL,EACF,IACE,OAAOC,EAAIO,IAAIL,GAAKE,WACpB,MAAOI,GACP,MAAO,qBAGX,GAAkB,MAAdT,EACF,OAAOC,EAAIS,IAAIP,GAAKE,WAEtB,MAAMM,MAAM,sBAAD,OAAuBX,EAAvB,M,WCwBEY,EA7CI,WACjB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOb,EAAP,KAAkBkB,EAAlB,KAEMC,EAAW,SAACC,GAChB,ICM8BC,EAAKC,EDN7BH,GCMwBE,EDNH,CAAEP,QAAOE,OAAMhB,aCOzB,QADkBsB,EDNoBF,EAAEG,OAAOC,WCQzD,CACLV,MAAO,KACPE,KAAM,KACNhB,UAAW,MAIFsB,EArBCG,MAAM,UAsBC,MAAfH,GAAmC,MAAbD,EAAIL,KACrB,GAGLK,EAAIrB,UACFqB,EAAIL,KACC,2BAAKK,GAAZ,IAAiBL,KAAMK,EAAIL,KAAOM,IAE7B,2BAAKD,GAAZ,IAAiBL,KAAMM,IAGrBD,EAAIL,KACC,CACLA,KAAMK,EAAIL,KAAOM,EACjBR,MAAO,MAGJ,CACLE,KAAMM,EACNR,MAAO,MAIQ,MAAfQ,EACED,EAAIL,KACFK,EAAIL,KAAKU,SAAS,KACb,eAAKL,GAEP,2BAAKA,GAAZ,IAAiBL,KAAK,GAAD,OAAKK,EAAIL,KAAT,OAEnBK,EAAIrB,UACC,CAAEgB,KAAM,MAEbK,EAAIP,MACFO,EAAIP,MAAMY,SAAS,KACd,GAEF,CAAEZ,MAAM,GAAD,OAAKO,EAAIP,MAAT,MAET,CAAEA,MAAO,MAGC,MAAfQ,EACED,EAAIL,MAAQK,EAAIrB,UACX,CACLc,MAAOjB,EAAQwB,EAAIP,MAAOO,EAAIL,KAAMK,EAAIrB,WACxCgB,KAAM,KACNhB,UAAW,MAIR,GAGU,QAAfsB,EACED,EAAIL,KACC,2BAAKK,GAAZ,IAAiBL,OAAQ,EAAIW,WAAWN,EAAIL,OAAOX,aAEjDgB,EAAIP,MACC,2BAAKO,GAAZ,IAAiBP,QAAS,EAAIa,WAAWN,EAAIP,QAAQT,aAEhD,GAYJgB,EAAIL,OAAQK,EAAIP,OAAUO,EAAIrB,UAK/BqB,EAAIrB,UACFqB,EAAIP,QAAUO,EAAIL,KACb,2BAAKK,GAAZ,IAAiBrB,UAAWsB,IAGvB,CACLR,MAAOjB,EAAQwB,EAAIP,MAAOO,EAAIL,KAAMK,EAAIrB,WACxCgB,KAAM,KACNhB,UAAWsB,GAOVD,EAAIL,KAKF,CACLF,MAAOO,EAAIL,KACXA,KAAM,KACNhB,UAAWsB,GAPJ,CAAEtB,UAAWsB,GApBb,2BAAKD,GAAZ,IAAiBrB,UAAWsB,KDzF5BP,EAASI,EAASL,OAClBG,EAAQE,EAASH,MACjBE,EAAaC,EAASnB,YAGxB,OACE,sBAAK4B,UAAU,aAAf,UACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,cAAf,SACGZ,GAASF,GAAS,QAGvB,sBAAKc,UAAU,YAAf,UACE,wBAAQC,KAAK,SAASC,QAASX,EAA/B,kBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,mBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,iBACA,wBAAQU,KAAK,SAASD,UAAU,kBAAkBE,QAASX,EAA3D,oBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,eACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,iBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,iBACA,wBAAQU,KAAK,SAASD,UAAU,kBAAkBE,QAASX,EAA3D,iBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,iBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,iBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,iBACA,wBAAQU,KAAK,SAASD,UAAU,kBAAkBE,QAASX,EAA3D,iBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,iBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,iBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,iBACA,wBAAQU,KAAK,SAASD,UAAU,kBAAkBE,QAASX,EAA3D,iBACA,wBAAQU,KAAK,SAASE,GAAG,OAAOD,QAASX,EAAzC,iBACA,wBAAQU,KAAK,SAASC,QAASX,EAA/B,iBACA,wBAAQU,KAAK,SAASD,UAAU,kBAAkBE,QAASX,EAA3D,wBEpCFa,G,kKACJ,WACE,OACE,cAAC,EAAD,Q,GAHYC,cAQHD,ICTfE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e935a595.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import { useState } from 'react';\nimport calculate from '../logic/calculate';\n\nconst Calculator = () => {\n  const [total, setTotal] = useState(0);\n  const [next, setNext] = useState(null);\n  const [operation, setOperation] = useState(null);\n\n  const operator = (e) => {\n    const operator = calculate({ total, next, operation }, e.target.innerText);\n    setTotal(operator.total);\n    setNext(operator.next);\n    setOperation(operator.operation);\n  };\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"calc-output\">\n        <div className=\"calc-result\">\n          {next || (total || '0')}\n        </div>\n      </div>\n      <div className=\"calc-grid\">\n        <button type=\"button\" onClick={operator}> AC </button>\n        <button type=\"button\" onClick={operator}> +/- </button>\n        <button type=\"button\" onClick={operator}> % </button>\n        <button type=\"button\" className=\"logic-operators\" onClick={operator}> รท </button>\n        <button type=\"button\" onClick={operator}>7</button>\n        <button type=\"button\" onClick={operator}> 8 </button>\n        <button type=\"button\" onClick={operator}> 9 </button>\n        <button type=\"button\" className=\"logic-operators\" onClick={operator}> x </button>\n        <button type=\"button\" onClick={operator}> 4 </button>\n        <button type=\"button\" onClick={operator}> 5 </button>\n        <button type=\"button\" onClick={operator}> 6 </button>\n        <button type=\"button\" className=\"logic-operators\" onClick={operator}> - </button>\n        <button type=\"button\" onClick={operator}> 1 </button>\n        <button type=\"button\" onClick={operator}> 2 </button>\n        <button type=\"button\" onClick={operator}> 3 </button>\n        <button type=\"button\" className=\"logic-operators\" onClick={operator}> + </button>\n        <button type=\"button\" id=\"zero\" onClick={operator}> 0 </button>\n        <button type=\"button\" onClick={operator}> . </button>\n        <button type=\"button\" className=\"logic-operators\" onClick={operator}> = </button>\n      </div>\n    </div>\n\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { ...obj, next: obj.next + buttonName };\n      }\n      return { ...obj, next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj };\n      }\n      return { ...obj, next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation after pressing '='\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj, operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if (obj.total && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import { Component } from 'react';\nimport Calculator from './components/Calculator';\nimport './components/myStyles.css';\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass App extends Component {\n  render() {\n    return (\n      <Calculator />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}